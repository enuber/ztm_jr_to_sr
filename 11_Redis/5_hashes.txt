Hashes in Redis are a data type that stores a collection of field-value pairs, similar to a dictionary or a map in other programming languages. Redis Hashes are perfect for representing objects or data structures that have multiple attributes.

Basic Operations with Hashes

Setting a Field-Value Pair

HSET key field value: Sets the value for a field in the hash stored at key. If the key does not exist, a new hash is created. If the field already exists in the hash, it is updated with the new value.

HSET user:1000 name "John Doe"
HSET user:1000 age 30


Getting a Value by Field

HGET key field: Retrieves the value associated with the specified field in the hash.

HGET user:1000 name


Setting Multiple Fields at Once

HMSET key field1 value1 field2 value2 ...: Sets multiple fields and values in the hash.

HMSET user:1000 name "John Doe" age 30 country "USA"


Getting Multiple Fields at Once

HMGET key field1 field2 ...: Retrieves the values of the specified fields.

HMGET user:1000 name age


Getting All Fields and Values

HGETALL key: Retrieves all fields and their values in the hash.

HGETALL user:1000
Checking if a Field Exists

HEXISTS key field: Returns 1 if the field exists in the hash, 0 if it does not.

HEXISTS user:1000 age
Deleting a Field

HDEL key field [field ...]: Deletes one or more fields from the hash.

HDEL user:1000 age
Getting the Number of Fields

HLEN key: Returns the number of fields in the hash.

HLEN user:1000
Incrementing a Field's Value

HINCRBY key field increment: Increments the value of a field in the hash by the specified integer.

HINCRBY user:1000 age 1
Getting All Field Names

HKEYS key: Returns all field names in the hash.

HKEYS user:1000
Getting All Values

HVALS key: Returns all values in the hash.

HVALS user:1000


Example Usage
Letâ€™s say you want to store information about a user with ID 1000. You can use a Redis hash to store their name, age, and country:

HSET user:1000 name "John Doe"
HSET user:1000 age 30
HSET user:1000 country "USA"


To retrieve this information:
HGETALL user:1000
This would return:

plaintext
Copy code
1) "name"
2) "John Doe"
3) "age"
4) "30"
5) "country"
6) "USA"

Use Cases

User Profiles: Store user details like name, email, age, etc., where each field represents an attribute of the user.

Configurations: Store application configurations where each key is a configuration type and the hash fields are configuration values.

Sessions: Store session data for users where each session ID maps to a hash containing session variables.


Redis hashes are efficient, especially when the number of fields in a hash is small, making them ideal for storing structured data.