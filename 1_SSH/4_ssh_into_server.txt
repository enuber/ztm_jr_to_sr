passwords or ssh

1. Diffie-Hellman key exchange
2. Arrive at symmetric key
3. Make sure no funny business
4. authenticate user

We need to authenticate the user so we know the person has the right to communicate. It is the default when you ssh into something. So just having the ip address doesn't allow anyone to get into the server.

Two ways
ask for password and enter it in.

Other way and better way is to not enter a password

RSA - allows us to provide / prove the identity without using a password.

in terminal from Desktop

// . - hidden file.
cd ~/.ssh

// here you will see a list of your rsa files if you have any when you do "ls"

// to generate a key you can do

// -C = comment provides a new comment (note: below is better at the end and correct way to do it)
ssh-keygen -C 'emailaddress'

// this will generate a public/private rsa key pair. Will ask you to enter a file name.
id_rsa_whatkeyisfor <--- like digital ocean would be id_rsa_digitalocean

// doesn't matter what the file is called. I already have github_rsa in my folder
// the .pub file is the public key and you can share it without issue, other one do not share
// to share the public key with another computer

pbcopy < ~/.ssh/filejustcreated.pub <-- will copy this info

// then ssh into the server you want to connect to. OR go into the company you are connecting to like github and look for the area settings > ssh where ssh is stored and add the key in the GUI
// in the server, folder you can make a directory called .ssh

mkdir .ssh

cd .ssh

// can then do "ls" to see if a file exists but looking for something like "authorized keys"
nano thatfilename

// will open the file in an editor.
// then paste what you paste what you copied earlier

// in nano cntrl-X to exit, Y to save and enter

// Now you can enter in without having to enter a password each time
// if you have multiple rsa files may need to do one final step from .ssh folder
ssh-add ~/.ssh/filethatyoucreated <--- private key

//////

ssh-keygen: This is the command-line utility used to generate, manage, and convert authentication keys for SSH.

-t rsa: Specifies the type of key to create. In this case, rsa (Rivest-Shamir-Adleman), which is a widely used public-key cryptosystem.

-b 4096: Specifies the number of bits in the key. 4096 bits is a strong level of encryption, offering more security than the default 2048 bits.

-C "your_email@example.com": This adds a comment to the key, usually your email address, which can help identify the key later.

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"


NOTE:
ssh-add -l <--- will give you a list of all the identities you have

ssh-add -D <--- will remove all identities, then can add back in what you want.